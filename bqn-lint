#!/usr/bin/env bqn

c  ⇐ •Import "deps/color.bqn"
s  ⇐ •Import "deps/string.bqn"
fs ⇐ •Import "deps/file_system.bqn"
fn ⇐ •Import "deps/fun.bqn"

nl     ← @+10
colors ← c.Green‿c.Yellow‿c.Red

title ← {
    a ← "↑↑↑" # arrows
    nl∾(∾colors{𝕎𝕩}¨a)∾c.Green " bqn-lint "∾(∾colors{𝕎𝕩}¨○⌽a)∾nl
}

replacements ← ⟨⟨"0≠≠", "×≠"⟩,
                ⟨"0<≠", "×≠"⟩,
                ⟨"¬=",  "≠"⟩, # TODO this could break trains
                ⟨"¬∘=",  "≠"⟩,
                ⟨"(¬=)",  "≠"⟩⟩ # TODO add more

CheckReplacement ← { f‿(t‿r)𝕊i‿l:
    m ← t⍷l
    { ¬∨´m ? "" ;
        •Out "In "∾f∾":"
        •Out "  Line "∾(•Fmt i)∾":"
        •Out "    "∾(c.Red t) s.Join t s.Split l
        •Out "    "∾ c.Yellow " ↑"⊏˜t fn.FindFull l
        •Out "    "∾(" "/˜⊑/m)∾(c.Yellow "this can be: ")∾c.Green r
        •Out ⟨⟩
    }
}

LintSingleFile ← { 𝕊file:
    l ← •file.Lines 𝕩
    {(file⋈𝕩)⊸CheckReplacement¨(↕∘≠⊸(⋈¨)l)}¨replacements
}

FixSingleFile ← { 𝕊f:
    l  ← •file.Lines 𝕩
    ts ← ⊑¨replacements # targets
    n  ← +´∾⥊ts⍷⌜l
    𝕩 •file.Lines l {t‿r𝕊𝕩: (r s.Join t s.Split ⊢)¨𝕩}´ replacements
    { ×n ? •Out "In "∾f∾": "∾c.Green (•Fmt n)∾" fix"∾{ n > 1 ? "es" ; "" } ; ∞ }
}

main ← {
    •Out title
    (c.Red "Must provide directory") ! 0≠≠•args
    d   ← { "."≡0⊑•args ? •wdpath ; 0⊑•args } # directory
    fix ← 1<≠•args                            # verbose
    { fix ? (c.Red "2nd argument must be '--fix' (if specified)") ! "--fix"≡⊑1⊏•args ; ∞ }
    f ← fs.ListRecursiveBQNFiles d
    { fix ? FixSingleFile¨f ; LintSingleFile¨f }
}

main
